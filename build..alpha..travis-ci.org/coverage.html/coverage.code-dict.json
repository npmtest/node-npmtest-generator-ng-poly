{"/home/travis/build/npmtest/node-npmtest-generator-ng-poly/test.js":"/* istanbul instrument in package npmtest_generator_ng_poly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/lib.npmtest_generator_ng_poly.js":"/* istanbul instrument in package npmtest_generator_ng_poly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_ng_poly = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_ng_poly = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-ng-poly && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_ng_poly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_ng_poly\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_ng_poly.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_generator_ng_poly.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_ng_poly.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_generator_ng_poly.__dirname +\n                    '/lib.npmtest_generator_ng_poly.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/app/index.js":"'use strict';\n\nrequire('babel-polyfill');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _genBase = require('../genBase');\n\nvar _genBase2 = _interopRequireDefault(_genBase);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _pify = require('pify');\n\nvar _pify2 = _interopRequireDefault(_pify);\n\nvar _package = require('../../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _yosay = require('yosay');\n\nvar _yosay2 = _interopRequireDefault(_yosay);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = _genBase2.default.extend({\n  initializing: function initializing() {\n    this.host = this.options.host || 'localhost';\n    this.port = this.options.port || 3000;\n    this.appDir = this.options['app-dir'] || 'app';\n    this.unitTestDir = this.options['unit-test-dir'] || 'app';\n    this.skipController = this.options['skip-controller'] || false;\n\n    console.log(_chalk2.default.yellow('Using host: ' + this.host));\n    console.log(_chalk2.default.yellow('Using port: ' + this.port));\n    console.log(_chalk2.default.yellow('Using app directory: ' + this.appDir));\n    console.log(_chalk2.default.yellow('Using unit test directory: ' + this.unitTestDir));\n    console.log(_chalk2.default.yellow('Route generator will ' + (this.skipController ? _chalk2.default.red('NOT ') : '') + 'create controllers'));\n  },\n  prompting: function prompting() {\n    var _this = this;\n\n    this.log((0, _yosay2.default)('Welcome to ngPoly!'));\n\n    // ask for app name\n    // get preferred langugaes\n    return this.prompt([{\n      name: 'appName',\n      message: 'What is the app\\'s name?',\n      validate: function validate(input) {\n        return !!input;\n      }\n    }, {\n      type: 'list',\n      name: 'ngversion',\n      message: 'Which version of Angular should be used?',\n      default: '1.4.*',\n      choices: _utils2.default.getAngularVersions()\n    }, {\n      type: 'list',\n      name: 'structure',\n      message: 'Which structure should be used?',\n      default: 'module-only',\n      choices: _utils2.default.getModuleStructures()\n    }, {\n      type: 'list',\n      name: 'markup',\n      message: 'Which is the preferred markup language?',\n      default: 'jade',\n      choices: _utils2.default.getMarkupLanguages()\n    }, {\n      type: 'list',\n      name: 'appScript',\n      message: 'Which is the preferred application scripting language?',\n      default: 'js',\n      choices: _utils2.default.getScriptLanguages()\n    }, {\n      type: 'confirm',\n      name: 'controllerAs',\n      message: 'Want to use Controller As syntax?',\n      default: true\n    }, {\n      type: 'confirm',\n      name: 'directiveTemplateUrl',\n      message: 'Should directives be generated using a templateUrl (and markup file) instead of an inline template?',\n      default: true\n    }, {\n      type: 'list',\n      name: 'testScript',\n      message: 'Which is the preferred test scripting language?',\n      default: function _default(answers) {\n        return answers.appScript;\n      },\n      choices: _utils2.default.getScriptLanguages()\n    }, {\n      type: 'list',\n      name: 'testFramework',\n      message: 'Which is the preferred unit testing framework?',\n      default: 'jasmine',\n      choices: _utils2.default.getTestFrameworks()\n    }, {\n      type: 'list',\n      name: 'e2eTestFramework',\n      message: 'Which is the preferred e2e testing framework?',\n      default: function _default(answers) {\n        return answers.testFramework;\n      },\n      choices: _utils2.default.getTestFrameworks()\n    }, {\n      type: 'list',\n      name: 'style',\n      message: 'Which is the preferred style language?',\n      default: 'less',\n      choices: _utils2.default.getStyleLanguages()\n    }, {\n      type: 'confirm',\n      name: 'polymer',\n      message: 'Should Polymer support be enabled?',\n      default: false\n    }, {\n      type: 'list',\n      name: 'framework',\n      message: 'Should a framework be setup?',\n      choices: function choices(answers) {\n        return _utils2.default.getUIFrameworks(answers.ngversion);\n      }\n    }, {\n      type: 'confirm',\n      name: 'ngRoute',\n      message: 'Should ngRoute be used instead of UI Router?',\n      default: false\n    }, {\n      type: 'checkbox',\n      name: 'bower',\n      message: 'Which additional Bower components should be installed?',\n      choices: function choices(answers) {\n        return _utils2.default.getBowerComponents(answers.ngversion);\n      }\n    }]).then(function (props) {\n      // needs to be a string\n      props.bower = props.bower.join(',');\n\n      // attach answers to `this`\n      _lodash2.default.merge(_this, props);\n    });\n  },\n  configuring: function configuring() {\n    var _this2 = this;\n\n    // create a directory named `appName`\n    this.destinationRoot(this.appName);\n\n    // save config\n    ['appScript', 'controllerAs', 'directiveTemplateUrl', 'e2eTestFramework', 'markup', 'ngRoute', 'structure', 'style', 'testFramework', 'testScript'].forEach(function (option) {\n      return _this2.config.set(option, _this2[option]);\n    });\n\n    this.context = {\n      pkg: _package2.default,\n      appName: this.appName,\n      structure: this.structure,\n      ngversion: this.ngversion,\n      appDir: this.appDir,\n      appScript: this.appScript,\n      testScript: this.testScript,\n      markup: this.markup,\n      style: this.style,\n      unitTestDir: this.unitTestDir,\n      host: this.host,\n      port: this.port,\n      moduleName: _utils2.default.lowerCamel(this.appName),\n      polymer: this.polymer,\n      framework: this.framework,\n      testFramework: this.testFramework,\n      e2eTestFramework: this.e2eTestFramework,\n      ngRoute: this.ngRoute,\n      bower: this.bower\n    };\n\n    // copy over common project files\n    ['.bowerrc', '.editorconfig', '.eslintrc', '.jscsrc', '.jshintrc', '_bower.json', '_build.config.js', '_karma.config.js', '_package.json', '_protractor.config.js', 'gulp/analyze.js', 'gulp/_build.js', 'gulp/_test.js', 'gulp/watch.js'].forEach(function (file) {\n      return _this2.copySimpleFile(file);\n    });\n\n    // files that need to be renamed when copied\n    this.copySimpleFile('_gulpfile.js', 'Gulpfile.js');\n    this.copySimpleFile('gitignore', '.gitignore');\n    this.copySimpleFile('_readme.md', 'README.md');\n\n    if (this.appScript === 'ts') {\n      ['_tsd.json', '_tslint.json'].forEach(function (file) {\n        return _this2.copySimpleFile(file);\n      });\n    }\n  },\n  writing: function writing() {\n    return regeneratorRuntime.async(function writing$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // create main module and index.html\n            this.copySimpleFile('_app.' + this.appScript, _path2.default.join(this.appDir, 'app-module.' + this.appScript));\n            this.copySimpleFile('_app-routes.' + this.appScript, _path2.default.join(this.appDir, 'app-routes.' + this.appScript));\n            this.copySimpleFile('_index.' + this.markup, _path2.default.join(this.appDir, 'index.' + this.markup));\n\n            _context.next = 5;\n            return regeneratorRuntime.awrap((0, _pify2.default)(_mkdirp2.default)(_path2.default.join(this.appDir, 'fonts')));\n\n          case 5:\n            _context.next = 7;\n            return regeneratorRuntime.awrap((0, _pify2.default)(_mkdirp2.default)(_path2.default.join(this.appDir, 'images')));\n\n          case 7:\n            return _context.abrupt('return', Promise.resolve());\n\n          case 8:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  },\n  install: function install() {\n    if (!this.options['skip-install']) {\n      this.installDependencies();\n      if (this.appScript === 'ts') {\n        this.log('Running ' + _chalk2.default.yellow.bold('tsd reinstall --save') + '. If this fails run the commands ' + 'yourself. TSD must be installed via `npm install -g tsd`.');\n        this.spawnCommand('tsd', ['reinstall', '--save']);\n      }\n    }\n  },\n  end: function end() {\n    this.composeWith('ng-poly:module', {\n      args: ['home'],\n      options: {\n        module: 'home',\n        markup: this.markup,\n        style: this.style,\n        'test-dir': this.testDir,\n        'test-script': this.testScript,\n        'controller-as': this.controllerAs,\n        'skip-controller': this.skipController,\n        'ng-route': this.ngRoute\n      }\n    }, {\n      local: require.resolve('../module'),\n      link: 'strong'\n    });\n  }\n});","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/genBase/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nrequire('babel-polyfill');\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _pify = require('pify');\n\nvar _pify2 = _interopRequireDefault(_pify);\n\nvar _package = require('../../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _recursiveReaddir = require('recursive-readdir');\n\nvar _recursiveReaddir2 = _interopRequireDefault(_recursiveReaddir);\n\nvar _updateNotifier = require('update-notifier');\n\nvar _updateNotifier2 = _interopRequireDefault(_updateNotifier);\n\nvar _utils = require('../utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _yeomanGenerator = require('yeoman-generator');\n\nvar _yeomanGenerator2 = _interopRequireDefault(_yeomanGenerator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = _yeomanGenerator2.default.Base.extend({\n  constructor: function constructor() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    /* eslint-disable prefer-reflect */\n    _yeomanGenerator2.default.Base.apply(this, args);\n    /* eslint-enable prefer-reflect */\n    this.name = args['0'][0];\n  },\n  askForModuleName: function askForModuleName(params) {\n    var _this = this;\n\n    var config = this.config,\n        name = this.name,\n        options = this.options;\n\n    var notifier = (0, _updateNotifier2.default)({\n      packageName: _package2.default.name,\n      packageVersion: _package2.default.version\n    });\n\n    // notifiy user about update, if there is an update\n    notifier.notify();\n\n    return this.prompt([{\n      type: 'list',\n      name: 'module',\n      store: true,\n      message: 'Which module is this for?',\n      default: config.get('lastUsedModule'),\n      when: function when() {\n        return !(options && options.module);\n      },\n      choices: function choices() {\n        var directory, files, choices;\n        return regeneratorRuntime.async(function choices$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return regeneratorRuntime.awrap(_utils2.default.getAppDir());\n\n              case 2:\n                directory = _context.sent;\n                _context.next = 5;\n                return regeneratorRuntime.awrap((0, _pify2.default)(_recursiveReaddir2.default)(directory));\n\n              case 5:\n                files = _context.sent;\n                _context.next = 8;\n                return regeneratorRuntime.awrap(_utils2.default.moduleFilter(files));\n\n              case 8:\n                choices = _context.sent;\n                return _context.abrupt('return', choices);\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, null, this);\n      }\n    }, {\n      name: 'url',\n      message: 'What\\'s the URL for this route?',\n      default: function _default() {\n        // if child state return child portion as url\n        if (name.indexOf('.') > -1) {\n          return '/' + _utils2.default.hyphenName(name.split('.')[1]);\n        }\n\n        return '/' + _utils2.default.hyphenName(name);\n      },\n      when: function when() {\n        return params && params.url && !config.get('ngRoute') && !(options && options.url);\n      }\n    }, {\n      name: 'templateUrl',\n      message: 'What\\'s the templateURL for this route?',\n      default: function _default(answers) {\n        var module, normalizeModulePath;\n        return regeneratorRuntime.async(function _default$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                module = answers.module || options.module;\n                _context2.next = 3;\n                return regeneratorRuntime.awrap(_utils2.default.normalizeModulePath(module));\n\n              case 3:\n                normalizeModulePath = _context2.sent;\n                return _context2.abrupt('return', normalizeModulePath + '/' + (options.structure === 'module-type' || config.get('structure') === 'module-type' ? 'views/' : '') + _utils2.default.hyphenName(name.replace('.', '-')) + '.tpl.html');\n\n              case 5:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, null, this);\n      },\n\n      when: function when() {\n        return params && params.templateUrl && !(options && options['template-url']);\n      }\n    }]).then(function (props) {\n      _this.module = props.module || options.module;\n      _this.url = props.url || options.url || name;\n      _this.templateUrl = props.templateUrl || options['template-url'];\n\n      // if moduleName ends with a slash remove it\n      if (_this.module.charAt(_this.module.length - 1) === '/' || _this.module.charAt(_this.module.length - 1) === '\\\\') {\n        _this.module = _this.module.slice(0, _this.module.length - 1);\n      }\n\n      // prepend slash if missing\n      if (_this.url && _this.url.charAt(0) !== '/' && _this.url.charAt(0) !== '\\\\') {\n        _this.url = '/' + _this.url;\n      }\n\n      // convert backslashes to forwardslashes for Windows\n      if (_this.templateUrl) {\n        _this.templateUrl = _this.templateUrl.replace('\\\\', '/');\n      }\n\n      // append .tpl.html if not existing\n      if (!/[.]tpl[.]html$/.test(_this.templateUrl)) {\n        _this.templateUrl = _this.templateUrl + '.tpl.html';\n      }\n    });\n  },\n  getConfig: function getConfig() {\n    var config, modules;\n    return regeneratorRuntime.async(function getConfig$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = this.name;\n            _context3.t1 = this.options.markup || this.config.get('markup');\n            _context3.t2 = this.options['app-script'] || this.config.get('appScript');\n            _context3.t3 = this.options.structure || this.config.get('structure');\n            _context3.t4 = this.config.get('controllerAs');\n            _context3.t5 = this.options['directive-template-url'] !== undefined && this.options['directive-template-url'] !== null ? this.options['directive-template-url'] : this.config.get('directiveTemplateUrl');\n            _context3.t6 = this.options['skip-controller'] !== undefined && this.options['skip-controller'] !== null ? this.options['skip-controller'] : this.config.get('skipController');\n            _context3.t7 = this.options['test-script'] || this.config.get('testScript');\n            _context3.t8 = this.config.get('testFramework');\n            _context3.t9 = this.config.get('e2eTestFramework');\n            _context3.t10 = this.options.style || this.config.get('style');\n            _context3.t11 = this.config.get('ngRoute');\n            _context3.next = 14;\n            return regeneratorRuntime.awrap(_utils2.default.getAppDir());\n\n          case 14:\n            _context3.t12 = _context3.sent;\n            _context3.next = 17;\n            return regeneratorRuntime.awrap(_utils2.default.getAppName());\n\n          case 17:\n            _context3.t13 = _context3.sent;\n            _context3.next = 20;\n            return regeneratorRuntime.awrap(_utils2.default.getUnitTestDir());\n\n          case 20:\n            _context3.t14 = _context3.sent;\n            _context3.t15 = _utils2.default.ctrlName(this.name);\n            _context3.t16 = _utils2.default.humanName(this.name);\n            _context3.t17 = _utils2.default.hyphenName(this.name);\n            _context3.t18 = _utils2.default.lowerCamel(this.name);\n            _context3.t19 = _utils2.default.upperCamel(this.name);\n            config = {\n              name: _context3.t0,\n              markup: _context3.t1,\n              appScript: _context3.t2,\n              structure: _context3.t3,\n              controllerAs: _context3.t4,\n              directiveTemplateUrl: _context3.t5,\n              skipController: _context3.t6,\n              testScript: _context3.t7,\n              testFramework: _context3.t8,\n              e2eTestFramework: _context3.t9,\n              style: _context3.t10,\n              ngRoute: _context3.t11,\n              appDir: _context3.t12,\n              appName: _context3.t13,\n              testDir: _context3.t14,\n              ctrlName: _context3.t15,\n              humanName: _context3.t16,\n              hyphenName: _context3.t17,\n              lowerCamel: _context3.t18,\n              upperCamel: _context3.t19\n            };\n\n            if (this.module) {\n              _context3.next = 29;\n              break;\n            }\n\n            return _context3.abrupt('return', config);\n\n          case 29:\n            _context3.next = 31;\n            return regeneratorRuntime.awrap(_utils2.default.extractModuleNames(this.module));\n\n          case 31:\n            modules = _context3.sent;\n\n            config.moduleName = _utils2.default.lowerCamel(modules[0]);\n            config.parentModuleName = _utils2.default.lowerCamel(modules[1]);\n\n            _context3.next = 36;\n            return regeneratorRuntime.awrap(_utils2.default.normalizeModulePath(this.module));\n\n          case 36:\n            config.modulePath = _context3.sent;\n\n\n            // create reference path to typings/tsd.d.ts from generated file\n            if (config.appScript === 'ts') {\n              // relative path between module path\n              config.referencePath = _path2.default.relative(config.modulePath, _path2.default.dirname(this.config.path));\n              // replace Windows path separators with Unix\n              config.referencePath = config.referencePath.replace('\\\\', '/');\n              config.referencePath = '../' + config.referencePath + '/typings/tsd.d.ts';\n              // if module/type structure we need to go up one more folder\n              if (config.structure === 'module-type' && !this.isModule) {\n                config.referencePath = '../' + config.referencePath;\n              }\n            }\n\n            return _context3.abrupt('return', config);\n\n          case 39:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  },\n  copyFile: function copyFile(type, component, dest, context) {\n    var pluralComponent, fileName, src;\n    return regeneratorRuntime.async(function copyFile$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            pluralComponent = component === 'factory' ? 'factories' : component + 's';\n            fileName = void 0, src = void 0;\n\n\n            if ((typeof dest === 'undefined' ? 'undefined' : _typeof(dest)) === 'object') {\n              context = dest;\n              dest = null;\n            }\n\n            _context4.t0 = context;\n\n            if (_context4.t0) {\n              _context4.next = 8;\n              break;\n            }\n\n            _context4.next = 7;\n            return regeneratorRuntime.awrap(this.getConfig());\n\n          case 7:\n            _context4.t0 = _context4.sent;\n\n          case 8:\n            context = _context4.t0;\n\n\n            if (!dest) {\n              // test or app directory?\n              dest = type === 'unit' ? context.testDir : context.appDir;\n              // append module path and type (if using module-type)\n              dest = _path2.default.join(dest, context.modulePath, component !== 'module' && context.structure === 'module-type' ? pluralComponent : '');\n\n              // create file name\n              fileName = context.hyphenName + '-' + component;\n              if (type === 'markup') {\n                fileName += '.tpl.' + context.markup;\n              }\n              if (type === 'src') {\n                fileName += '.' + context.appScript;\n              }\n              if (type === 'unit') {\n                fileName += '_test.' + context.testScript;\n              }\n              // style types ALWAYS send a dest\n\n              // append file name to dest\n              dest = _path2.default.join(dest, fileName);\n            }\n\n            if (type === 'markup') {\n              src = '_' + component + '.' + context.markup;\n            }\n            if (type === 'src') {\n              src = '_' + component + '.' + context.appScript;\n            }\n            if (type === 'style') {\n              src = component + '.' + context.style;\n            }\n            if (type === 'unit') {\n              src = '_spec.' + context.testScript;\n            }\n\n            this.copySimpleFile(src, dest, context);\n\n          case 15:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, null, this);\n  },\n  copySimpleFile: function copySimpleFile(src, dest, context) {\n    context = context || this.context;\n    // remove underscore from templated file names\n    dest = dest || src.replace(/_/g, '');\n\n    this.fs.copyTpl(this.templatePath(src), this.destinationPath(dest), context);\n  },\n  copyMarkupFile: function copyMarkupFile(component, dest, context) {\n    return this.copyFile('markup', component, dest, context);\n  },\n  copySrcFile: function copySrcFile(component, dest, context) {\n    return this.copyFile('src', component, dest, context);\n  },\n  copyStyleFile: function copyStyleFile(component, dest, context) {\n    return this.copyFile('style', component, dest, context);\n  },\n  copyUnitTest: function copyUnitTest(component, dest, context) {\n    return this.copyFile('unit', component, dest, context);\n  },\n  copyE2e: function copyE2e(context) {\n    var testScript = context.testScript === 'ts' ? 'js' : context.testScript,\n        e2eFile = _path2.default.join('e2e', context.hyphenName, context.hyphenName);\n\n    this.copySimpleFile('page.po.' + testScript, e2eFile + '.po.' + testScript, context);\n    this.copySimpleFile('page_test.' + testScript, e2eFile + '_test.' + testScript, context);\n  }\n});","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/index.js":"'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _app = require('./app');\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _element = require('./element');\n\nvar _element2 = _interopRequireDefault(_element);\n\nvar _module = require('./module');\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _name = require('./name');\n\nvar _name2 = _interopRequireDefault(_name);\n\nvar _prompts = require('./prompts');\n\nvar _prompts2 = _interopRequireDefault(_prompts);\n\nvar _route = require('./route');\n\nvar _route2 = _interopRequireDefault(_route);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_lodash2.default.assign(exports, _app2.default, _element2.default, _module2.default, _name2.default, _prompts2.default, _route2.default);","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/app.js":"'use strict';\n\nvar _getYoRcPath = require('get-yo-rc-path');\n\nvar _getYoRcPath2 = _interopRequireDefault(_getYoRcPath);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _removeTrailingSlash = require('remove-trailing-slash');\n\nvar _removeTrailingSlash2 = _interopRequireDefault(_removeTrailingSlash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Return JSON contents of file name from root\n * @param {String} fileName - name of file to read\n * @returns {Promise<Object>} - file contents\n */\n/* eslint-disable space-before-function-paren */\nvar getFileFromRoot = function _callee(fileName) {\n  return regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = _path2.default;\n          _context.next = 3;\n          return regeneratorRuntime.awrap(_getYoRcPath2.default.dir());\n\n        case 3:\n          _context.t1 = _context.sent;\n          _context.t2 = fileName;\n          _context.t3 = _context.t0.join.call(_context.t0, _context.t1, _context.t2);\n          return _context.abrupt('return', require(_context.t3));\n\n        case 7:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, null, undefined);\n};\n/* eslint-enable global-require */\n\n/**\n * Return build config\n * @returns {Promise<Object>} - build config\n */\nvar getBuildConfig = function getBuildConfig() {\n  return getFileFromRoot('build.config.js');\n};\n\nmodule.exports = {\n  getFileFromRoot: getFileFromRoot,\n\n  /**\n   * Gets the appDir from the root build.config.js without trailing / or \\\n   * @return {Promise<String>} - app directory path\n   */\n  getAppDir: function getAppDir() {\n    return regeneratorRuntime.async(function getAppDir$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return regeneratorRuntime.awrap(getBuildConfig());\n\n          case 2:\n            _context2.t0 = _context2.sent.appDir;\n            return _context2.abrupt('return', (0, _removeTrailingSlash2.default)(_context2.t0));\n\n          case 4:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  },\n\n\n  /**\n   * Gets the unitTestDir from the root build.config.js\n   * @return {Promise<String>} - unit test directory path\n   */\n  getUnitTestDir: function getUnitTestDir() {\n    return regeneratorRuntime.async(function getUnitTestDir$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return regeneratorRuntime.awrap(getBuildConfig());\n\n          case 2:\n            return _context3.abrupt('return', _context3.sent.unitTestDir);\n\n          case 3:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  }\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/element.js":"'use strict';\n\nmodule.exports = {\n  /**\n   * Validates element name by making sure a hyphen exists\n   * @param {String} name - element name\n   * @return {Boolean} is element name valid?\n   */\n\n  checkElementName: function checkElementName(name) {\n    return name.indexOf('-') > 0 && name.indexOf('-') < name.length - 1;\n  }\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/module.js":"'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _app = require('./app');\n\nvar _app2 = _interopRequireDefault(_app);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _getYoRcPath = require('get-yo-rc-path');\n\nvar _getYoRcPath2 = _interopRequireDefault(_getYoRcPath);\n\nvar _name = require('./name');\n\nvar _name2 = _interopRequireDefault(_name);\n\nvar _ngModGetNames = require('ng-mod-get-names');\n\nvar _ngModGetNames2 = _interopRequireDefault(_ngModGetNames);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _pathExists = require('path-exists');\n\nvar _pathExists2 = _interopRequireDefault(_pathExists);\n\nvar _pify = require('pify');\n\nvar _pify2 = _interopRequireDefault(_pify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Converts module string to key value pair {name, value} for choice\n * @param {String} module - module name\n * @return {Promise<Object>} - {name, value} of module\n */\n/* eslint-disable space-before-function-paren */\nvar convertToChoice = function _callee(module) {\n  var appDir;\n  return regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return regeneratorRuntime.awrap(_app2.default.getAppDir());\n\n        case 2:\n          appDir = _context.sent;\n          return _context.abrupt('return', {\n            name: module,\n            value: module.replace(appDir + '\\\\', '').replace(appDir + '/', '')\n          });\n\n        case 4:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, null, undefined);\n};\n\n/**\n * Returns modules' names in path\n * @param {String} modulePath - path to module\n * @param {String} symbol - character to split by\n * @return {Array} - module names\n */\nvar extractBasedOnChar = function extractBasedOnChar(modulePath, symbol) {\n  var modules = []\n  // path after last symbol is module name\n  ,\n      moduleName = modulePath.slice(modulePath.lastIndexOf(symbol)).replace(symbol, '');\n\n  var parentModuleName = void 0;\n\n  modules.push(moduleName);\n\n  // determine if user provided more than 1 symbol\n  parentModuleName = modulePath.slice(0, modulePath.lastIndexOf(symbol));\n  if (parentModuleName.indexOf(symbol) > -1) {\n    parentModuleName = modulePath.slice(parentModuleName.lastIndexOf(symbol), modulePath.lastIndexOf(symbol));\n    parentModuleName = parentModuleName.replace(symbol, '');\n  }\n\n  modules.push(parentModuleName);\n\n  return modules;\n};\n\n/**\n * Return file path\n * @param {String} filePath - path to module MINUS the convention {,-routes,-module} and extension\n * @param {Boolean} isLookingForRoutes - looking for routes file? or just module?\n * @return {Promise<String>} file path\n*/\n/* eslint-disable space-before-function-paren */\nvar findFile = function _callee2(filePath, isLookingForRoutes) {\n  var files, conventions, extensions;\n  return regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          /* eslint-enable space-before-function-paren */\n          files = [], conventions = ['-module', ''], extensions = ['coffee', 'es6', 'js', 'ts'];\n\n\n          if (isLookingForRoutes) {\n            conventions.unshift('-routes');\n          }\n\n          conventions.forEach(function (convention) {\n            extensions.forEach(function (extension) {\n              files.push(filePath + convention + '.' + extension);\n            });\n          });\n\n          _context2.next = 5;\n          return regeneratorRuntime.awrap(Promise.all(files.map(_pathExists2.default)));\n\n        case 5:\n          _context2.t0 = _context2.sent.indexOf(true);\n          return _context2.abrupt('return', files[_context2.t0]);\n\n        case 7:\n        case 'end':\n          return _context2.stop();\n      }\n    }\n  }, null, undefined);\n};\n\n/**\n * Determine if file is a module file\n * @param {String} file - file name to analyze\n * @return {Boolean} - is file a module file\n */\nvar filterModuleFiles = function filterModuleFiles(file) {\n  var fileBaseDirectoryWithSuffix = _path2.default.dirname(file).split(_path2.default.sep).pop() + '-module',\n      fileName = _path2.default.basename(file).replace(_path2.default.extname(file), '');\n\n  return fileName === fileBaseDirectoryWithSuffix;\n};\n\n/**\n * Determine if file is a script file\n * @param {String} file - file name to analyze\n * @return {Boolean} - is file a script file\n */\nvar filterScriptFiles = function filterScriptFiles(file) {\n  return file.indexOf('.coffee') >= 0 || file.indexOf('.js') >= 0 || file.indexOf('.ts') >= 0 || file.indexOf('.es6') >= 0;\n};\n\nmodule.exports = {\n  /**\n   * Returns child and parent module names\n   * @param {String} modulePath - path to module\n   * @return {Promise<Object[]>} - [child, parent]\n   */\n\n  extractModuleNames: function extractModuleNames(modulePath) {\n    return regeneratorRuntime.async(function extractModuleNames$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.t0 = modulePath;\n            _context3.next = 3;\n            return regeneratorRuntime.awrap(_app2.default.getAppDir());\n\n          case 3:\n            _context3.t1 = _context3.sent;\n\n            if (!(_context3.t0 === _context3.t1)) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 7;\n            return regeneratorRuntime.awrap(_app2.default.getFileFromRoot('package.json'));\n\n          case 7:\n            _context3.t2 = _context3.sent.name;\n            return _context3.abrupt('return', [_context3.t2, null]);\n\n          case 9:\n\n            modulePath = modulePath.replace(/\\\\/g, '/');\n            // uses module syntax\n\n            if (!(modulePath.indexOf('/') > -1)) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt('return', extractBasedOnChar(modulePath, '/'));\n\n          case 12:\n            return _context3.abrupt('return', [modulePath, null]);\n\n          case 13:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, null, this);\n  },\n\n\n  /**\n   * Returns module file path\n   * @param {String} modulePath - path to module MINUS the convention {,-module} and extension\n   * @return {Promise<String>} - file path\n   */\n  findModuleFile: function findModuleFile(modulePath) {\n    var moduleFile;\n    return regeneratorRuntime.async(function findModuleFile$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return regeneratorRuntime.awrap(findFile(modulePath, false));\n\n          case 2:\n            moduleFile = _context4.sent;\n\n\n            if (moduleFile.indexOf('-module') === -1) {\n              console.log(_chalk2.default.red('Module file names without a `-module` prefix are deprecated. Official support will be ' + 'dropped in v0.12.0. Add a `-module` prefix to be officially supported.'));\n            }\n\n            return _context4.abrupt('return', moduleFile);\n\n          case 5:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, null, this);\n  },\n\n\n  /**\n   * Returns routesfile path\n   * @param {String} routesPath - path to module MINUS the convention {,-routes,-module} and extension\n   * @return {Promise<String>} - file path\n   */\n  findRoutesFile: function findRoutesFile(routesPath) {\n    var routesFile;\n    return regeneratorRuntime.async(function findRoutesFile$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return regeneratorRuntime.awrap(findFile(routesPath, true));\n\n          case 2:\n            routesFile = _context5.sent;\n\n\n            if (routesFile.indexOf('-routes') === -1) {\n              console.log(_chalk2.default.red('Routes file names without a `-routes` prefix are deprecated. Official support will be ' + 'dropped in v0.12.0. Add a `-routes` prefix to be officially supported.'));\n            }\n\n            return _context5.abrupt('return', routesFile);\n\n          case 5:\n          case 'end':\n            return _context5.stop();\n        }\n      }\n    }, null, this);\n  },\n\n\n  /**\n   * Gets the app's name from the main module in the appDir\n   * @return {Promise<String>} - app name\n   */\n  getAppName: function getAppName() {\n    var filePath, moduleFile;\n    return regeneratorRuntime.async(function getAppName$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.t0 = _path2.default;\n            _context6.next = 3;\n            return regeneratorRuntime.awrap(_getYoRcPath2.default.dir());\n\n          case 3:\n            _context6.t1 = _context6.sent;\n            _context6.next = 6;\n            return regeneratorRuntime.awrap(_app2.default.getAppDir());\n\n          case 6:\n            _context6.t2 = _context6.sent;\n            filePath = _context6.t0.join.call(_context6.t0, _context6.t1, _context6.t2, 'app');\n            _context6.next = 10;\n            return regeneratorRuntime.awrap(this.findModuleFile(filePath));\n\n          case 10:\n            moduleFile = _context6.sent;\n            _context6.next = 13;\n            return regeneratorRuntime.awrap((0, _pify2.default)(_fs2.default.readFile)(moduleFile));\n\n          case 13:\n            _context6.t3 = _context6.sent.toString();\n            return _context6.abrupt('return', (0, _ngModGetNames2.default)(_context6.t3)[0]);\n\n          case 15:\n          case 'end':\n            return _context6.stop();\n        }\n      }\n    }, null, this);\n  },\n\n\n  /**\n   * Returns list of modules when given a list of files\n   * @param {String[]} files - list of files to filter\n   * @return {Promise<Object[]>} - list of modules\n   */\n  moduleFilter: function moduleFilter(files) {\n    return Promise.all(_lodash2.default.uniq(files.filter(filterScriptFiles).filter(filterModuleFiles).map(function (file) {\n      return _path2.default.dirname(file);\n    })).map(convertToChoice));\n  },\n\n\n  /**\n   * Converts backslashes and forwardslashes to path separator\n   * @param {String} modulePath - path to module\n   * @return {Promise<String>} - normalized module path\n   */\n  normalizeModulePath: function normalizeModulePath(modulePath) {\n    return regeneratorRuntime.async(function normalizeModulePath$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.t0 = modulePath;\n            _context7.next = 3;\n            return regeneratorRuntime.awrap(_app2.default.getAppDir());\n\n          case 3:\n            _context7.t1 = _context7.sent;\n\n            if (!(_context7.t0 === _context7.t1)) {\n              _context7.next = 6;\n              break;\n            }\n\n            return _context7.abrupt('return', '');\n\n          case 6:\n            return _context7.abrupt('return', modulePath.replace(/[\\\\\\/]/g, _path2.default.sep).split(_path2.default.sep).map(_name2.default.hyphenName).join(_path2.default.sep));\n\n          case 7:\n          case 'end':\n            return _context7.stop();\n        }\n      }\n    }, null, this);\n  }\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/name.js":"'use strict';\n\nvar _underscore = require('underscore.string');\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns human readable form\n * @param {String} name - name to convert\n * @return {String} - converted name\n */\nvar humanName = function humanName(name) {\n  return _underscore2.default.humanize(name);\n};\n\n/**\n * Returns hyphenated name\n * @param {String} name - name to convert\n * @return {String} - converted name\n */\nvar hyphenName = function hyphenName(name) {\n  return _underscore2.default.slugify(humanName(name));\n};\n\n/**\n * Returns upper camel case\n * @param {String} name - name to convert\n * @return {String} - converted name\n */\nvar upperCamel = function upperCamel(name) {\n  return _underscore2.default.classify(hyphenName(name));\n};\n\nmodule.exports = {\n  humanName: humanName,\n  hyphenName: hyphenName,\n  upperCamel: upperCamel,\n\n  /**\n   * Returns controller name\n   * @param {String} name - name to convert\n   * @return {String} - converted name\n   */\n  ctrlName: function ctrlName(name) {\n    return upperCamel(name) + 'Ctrl';\n  },\n\n\n  /**\n   * Returns lower camel case\n   * @param {String} name - name to convert\n   * @return {String} - converted name\n   */\n  lowerCamel: function lowerCamel(name) {\n    return _underscore2.default.camelize(hyphenName(name));\n  }\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/prompts.js":"'use strict';\n\n/**\n * Convert a list of strings to a list of objects with a name and value\n * @param {String[]} choices - list in the format of 'name:value' or 'name'\n * @return {Object[]} - choices with name and value properties\n */\n\nvar convertToNameValue = function convertToNameValue(choices) {\n  return choices.map(function (choice) {\n    var name = choice.split(':')[0],\n        value = choice.split(':')[1] || name.toLowerCase();\n\n    return { name: name, value: value };\n  });\n};\n\nmodule.exports = {\n  /**\n   * Returns supported Angular versions\n   * @return {Object[]} - list of supported Angular versions with name and value\n   */\n\n  getAngularVersions: function getAngularVersions() {\n    return ['1.4.*', '1.3.*', '1.2.*'].map(function (version) {\n      return { name: version, value: version };\n    });\n  },\n\n\n  /**\n   * Returns available Bower component choices for a given Angular version\n   * @param {String} [angularVersion=1.2.*] - version of Angular being used in the format of '1.X.*'\n   * @return {Object[]} - list of bower components with a name and value property\n   */\n  getBowerComponents: function getBowerComponents() {\n    var angularVersion = arguments.length <= 0 || arguments[0] === undefined ? '1.2.*' : arguments[0];\n\n    var bowerComponents = ['Angular Animate:animate', 'Angular Cookies:cookies', 'Angular Resource:resource', 'Angular Sanitize:sanitize', 'Angular Touch:touch', 'Font Awesome:fontawesome', 'Lo-Dash:lodash', 'Restangular (installs Lo-Dash):restangular'];\n\n    if (angularVersion !== '1.2.*') {\n      bowerComponents.splice(1, 0, 'Angular Aria:aria');\n      bowerComponents.splice(3, 0, 'Angular Messages:messages');\n    }\n\n    return convertToNameValue(bowerComponents);\n  },\n\n\n  /**\n   * Returns supported markup languages\n   * @return {Object[]} - list of markup languages with name and value properties\n   */\n  getMarkupLanguages: function getMarkupLanguages() {\n    return convertToNameValue(['HAML', 'HTML', 'Jade']);\n  },\n\n\n  /**\n   * Returns supported module structures\n   * @return {Object[]} - list of module structures with name and value properties\n   */\n  getModuleStructures: function getModuleStructures() {\n    return convertToNameValue([['app/', '├── module1/', '│   ├── module2/', '│   ├── module1-module.js', '│   └── module1-controller.js', '└── app.js'].join('\\n') + ':module-only', ['app/', '├── module1/', '│   ├── controllers/', '│   │   └── module1-controller.js', '│   ├── module2/', '│   └── module1-module.js', '└── app.js'].join('\\n') + ':module-type']);\n  },\n\n\n  /**\n   * Returns supported script languages\n   * @return {Object[]} - list of script languages with name and value properties\n   */\n  getScriptLanguages: function getScriptLanguages() {\n    return convertToNameValue(['CoffeeScript:coffee', 'EcmaScript2015 (ES6) using Babel:es6', 'JavaScript (ES5):js', 'TypeScript:ts']);\n  },\n\n\n  /**\n   * Returns supported style langauges\n   * @return {Object[]} - list of style languages with a name and value property\n   */\n  getStyleLanguages: function getStyleLanguages() {\n    return convertToNameValue(['CSS', 'LESS', 'SCSS', 'Stylus:styl']);\n  },\n\n\n  /**\n   * Returns supported test frameworks\n   * @return {Object[]} - list of test frameworks with a name and value property\n   */\n  getTestFrameworks: function getTestFrameworks() {\n    return convertToNameValue(['Jasmine', 'Mocha with Chai:mocha']);\n  },\n\n\n  /**\n   * Returns available frameworks for a given Angular version\n   * @param {String} [angularVersion=1.2.*] - version of Angular being used in the format of '1.X.*'\n   * @return {Object[]} - list of frameworks with a name and value property\n   */\n  getUIFrameworks: function getUIFrameworks() {\n    var angularVersion = arguments.length <= 0 || arguments[0] === undefined ? '1.2.*' : arguments[0];\n\n    var frameworks = ['none', 'Bootstrap with AngularStrap:angularstrap', 'Bootstrap with UI Bootstrap:uibootstrap', 'Foundation with Angular Foundation:foundation'];\n\n    if (angularVersion !== '1.2.*') {\n      frameworks.splice(1, 0, 'Angular Material:material');\n    }\n\n    return convertToNameValue(frameworks);\n  }\n};","/home/travis/build/npmtest/node-npmtest-generator-ng-poly/node_modules/generator-ng-poly/generators/utils/route.js":"'use strict';\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _os = require('os');\n\nvar _indentString = require('indent-string');\n\nvar _indentString2 = _interopRequireDefault(_indentString);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _funcHasParam = require('func-has-param');\n\nvar _funcHasParam2 = _interopRequireDefault(_funcHasParam);\n\nvar _path = require('path');\n\nvar _newlineRegex = require('newline-regex');\n\nvar _newlineRegex2 = _interopRequireDefault(_newlineRegex);\n\nvar _countSpaces = require('count-spaces');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns whether the module's config function is injecting parameter\n * @param {String} fileContents - file contents of module\n * @param {Object} config - user's config\n * @return {Boolean} - does module have param?\n */\nvar hasParam = function hasParam(fileContents, config) {\n  var param = config.ngRoute ? '$routeProvider' : '$stateProvider';\n\n  var opts = config.appScript === 'ts' ? { language: 'ts' } : null;\n\n  if (config.appScript === 'coffee') {\n    return new RegExp('\\\\(.*' + param + '.*\\\\) ->').test(fileContents);\n  }\n\n  return (0, _funcHasParam2.default)(fileContents, 'config', param, opts);\n};\n\n/**\n * Line includes config function\n * @param {String} line - line to check for config function existence\n * @param {Boolean} isCoffeeScript - is the line written in CoffeeScript?\n * @return {Boolean} - line has config function\n */\nvar lineHasConfigFunction = function lineHasConfigFunction(line, isCoffeeScript) {\n  if (isCoffeeScript) {\n    return line.indexOf('config') > -1 && line.indexOf('->') > -1;\n  }\n\n  return line.indexOf('function config(') > -1;\n};\n\n/**\n * Add param to config function line\n * @param {String} line - line to add parameter to\n * @param {String} param - parameter to add\n * @param {String} lang - which language is line written in? (coffee, es6, js, or ts)\n * @param {String} [type] - when lang === ts then insert type\n * @return {String} - config function line with parameter added\n */\nvar addParamToConfigFunction = function addParamToConfigFunction(line, param, lang, type) {\n  var paramToInsert = '$' + param;\n\n  // config line ending will be stripped\n  // this will add it back\n  if (lang === 'ts') {\n    paramToInsert += ': ' + type + ') {';\n  } else if (lang === 'coffee') {\n    paramToInsert += ') ->';\n  } else {\n    paramToInsert += ') {';\n  }\n\n  // previous state had no parameters - config()\n  if (line.lastIndexOf('(') === line.lastIndexOf(')') - 1) {\n    return line.slice(0, line.lastIndexOf(')')) + paramToInsert;\n  }\n\n  // CoffeScript && previous state had no existing parameters - config ->\n  if (lang === 'coffee' && line.lastIndexOf('(') === -1 && line.lastIndexOf(')') === -1) {\n    return line.slice(0, line.lastIndexOf('g')) + 'g (' + paramToInsert;\n  }\n\n  // previous state had existing parameters - config()\n  return line.slice(0, line.lastIndexOf(')')) + ', ' + paramToInsert;\n};\n\n/**\n * Injects the parameter into the module's config function\n * @param {Array} lines - lines to modify\n * @param {Object} config - user's config\n * @return {Array} - modified lines\n */\nvar addParam = function addParam(lines, config) {\n  var param = config.ngRoute ? 'routeProvider' : 'stateProvider',\n      type = config.ngRoute ? 'ng.route.IRouteProvider' : 'ng.ui.IStateProvider';\n\n  return lines.map(function (line) {\n    if (lineHasConfigFunction(line, config.appScript === 'coffee')) {\n      return addParamToConfigFunction(line, param, config.appScript, type);\n    }\n\n    return line;\n  });\n};\n\n/**\n * Analyzes lines to determine where to insert new route\n * @param {Array} lines - lines to analyze\n * @param {Object} config - user's config\n * @return {Object} - info regarding insertion points\n */\nvar analyzeLines = function analyzeLines(lines, config) {\n  var newRoute = config.ngRoute ? 'when' : 'state';\n\n  var braceCount = 0;\n\n  var analysis = {\n    routeStartIndex: -1,\n    routeEndIndex: -1,\n    configFunctionIndex: -1\n  };\n\n  lines.forEach(function (line, i) {\n    if (config.appScript === 'ts' || config.appScript === 'js' || config.appScript === 'es6') {\n      if (line.indexOf('function config(') > -1) {\n        analysis.configFunctionIndex = i;\n      }\n\n      // look for .state and set routeStartIndex\n      if (line.indexOf('.' + newRoute + '(') > -1) {\n        analysis.routeStartIndex = i;\n      }\n\n      // open braces add to braceCount\n      if (analysis.routeStartIndex > -1 && line.indexOf('{') > -1) {\n        braceCount++;\n      }\n\n      // close braces subract from braceCount\n      if (analysis.routeStartIndex > -1 && line.indexOf('}') > -1) {\n        braceCount--;\n      }\n\n      // when braceCount = 0 the end of the state has been reached\n      // set routeEndIndex\n      if (analysis.routeStartIndex > -1 && braceCount === 0) {\n        analysis.routeEndIndex = i;\n      }\n    } else {\n      if (line.indexOf('.config') > -1 && line.indexOf('->') > -1) {\n        analysis.configFunctionIndex = i;\n      }\n\n      // look for .state and set routeStartIndex\n      if (line.indexOf('.' + newRoute) > -1) {\n        analysis.routeStartIndex = i;\n      }\n    }\n  });\n\n  analysis.existingRouteFound = analysis.routeStartIndex !== -1;\n\n  return analysis;\n};\n\n/**\n * Returns new state to add\n * @param {Object} state - state info to format\n * @param {Object} analysis - information for insertion\n * @param {Object} config - user's config\n * @return {String[]} - lines of new state\n */\nvar prepareState = function prepareState(state, analysis, config) {\n  var templateFile = void 0;\n\n  var context = {\n    analysis: analysis,\n    config: config,\n    state: state\n  };\n\n  templateFile = (0, _path.join)(__dirname, 'templates', '_' + (config.ngRoute ? 'ngroute' : 'uirouter') + '.');\n  // js, es6, ts files all use the same templates\n  templateFile += config.appScript === 'coffee' ? 'coffee' : 'js';\n\n  return _lodash2.default.template(_fs2.default.readFileSync(templateFile))(context).split(_newlineRegex2.default);\n};\n\n/**\n * Adds state to lines\n * @param {Array} lines - lines to modify with state\n * @param {Object} state - state info to add to lines\n * @param {Object} analysis - insertion info\n * @param {Object} config - user's config\n * @return {Array} - modified lines with added state\n */\nvar addState = function addState(lines, state, analysis, config) {\n  var insertLine = void 0,\n      numOfSpaces = void 0,\n      numOfSpacesCounter = void 0;\n\n  // count spaces to prepend to state\n  var lineToCheck = lines[analysis.existingRouteFound ? analysis.routeStartIndex : analysis.configFunctionIndex];\n\n  numOfSpaces = (0, _countSpaces.start)(lineToCheck);\n\n  // if there is an existing route, remove 2 more spaces from indent to line up with existing routes\n  // else add 2 spaces\n  if (analysis.existingRouteFound) {\n    numOfSpaces -= 2;\n  } else {\n    numOfSpaces += 2;\n  }\n\n  // prepend spaces\n  state = state.map(function (stateLine) {\n    return (0, _indentString2.default)(stateLine, ' ', numOfSpaces);\n  });\n\n  if (config.appScript !== 'coffee') {\n    insertLine = analysis.existingRouteFound ? analysis.routeEndIndex : analysis.configFunctionIndex + 1;\n  } else if (analysis.existingRouteFound) {\n    // determine where last state ends by examining spaces\n    // insert new route on first line to have less spaces at the start\n    numOfSpaces = (0, _countSpaces.start)(lines[analysis.routeStartIndex]);\n    numOfSpacesCounter = numOfSpaces;\n    insertLine = analysis.routeStartIndex;\n    while (numOfSpacesCounter >= numOfSpaces) {\n      insertLine++;\n      numOfSpacesCounter = (0, _countSpaces.start)(lines[insertLine]);\n    }\n  } else {\n    insertLine = analysis.configFunctionIndex + 1;\n  }\n\n  lines.splice(insertLine, 0, state.join(_os.EOL));\n\n  return lines.join(_os.EOL);\n};\n\nmodule.exports = {\n  /**\n   * Adds route to module's config\n   * @param {String} fileContents - file contents of module\n   * @param {Object} state - state info to add\n   * @param {Object} config - user's config\n   * @return {String} - modified file contents with added state\n   */\n\n  addRoute: function addRoute(fileContents, state, config) {\n    // checking if provider is used\n    var needsParam = !hasParam(fileContents, config);\n\n    var lines = fileContents.split(_newlineRegex2.default);\n\n    var analysis = analyzeLines(lines, config);\n\n    // if file needs parameter, add it\n    if (needsParam) {\n      lines = addParam(lines, config);\n    }\n\n    var newState = prepareState(state, analysis, config);\n\n    return addState(lines, newState, analysis, config);\n  }\n};"}